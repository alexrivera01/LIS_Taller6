/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package agenciaviajes.presentacion;

import agenciaviajes.negocio.Cliente;
import agenciaviajes.negocio.Plan;
import avenciaviajes.acceso.IServidorCentral;
import avenciaviajes.acceso.ServicioServidorCentralSocket;
import com.google.gson.Gson;
import java.util.ArrayList;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.table.DefaultTableModel;
import mvcf.AModel;
import mvcf.AView;

/**
 *
 * @author Alexander
 */
public class GUIClientesPotenciales extends javax.swing.JFrame implements AView {

    
    DefaultTableModel modelo = new DefaultTableModel();
    DefaultComboBoxModel myCombo = new DefaultComboBoxModel();
    
    
    /**
     * Creates new form GuiClientesPotenciales
     */
    public GUIClientesPotenciales() {
        initComponents();
        String []titulos={"Id","Nombres","Apellidos","Email","Sexo","Edad"};
        modelo= new DefaultTableModel(null,titulos);
        tbUsuarios.setModel(modelo);
        this.actualizarComboBox();
        this.consultarPlanesServicio();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        ComboBoxPlanes = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbUsuarios = new javax.swing.JTable();
        buttonClientesPotenciales = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Seleccione Plan : ");

        tbUsuarios.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tbUsuarios);

        buttonClientesPotenciales.setText("Buscar ClientesPotenciales");
        buttonClientesPotenciales.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonClientesPotencialesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(154, 154, 154)
                        .addComponent(jLabel1)
                        .addGap(101, 101, 101)
                        .addComponent(ComboBoxPlanes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(114, 114, 114)
                        .addComponent(buttonClientesPotenciales))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 792, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(22, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(57, 57, 57)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(ComboBoxPlanes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonClientesPotenciales))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonClientesPotencialesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonClientesPotencialesActionPerformed
        llenarTabla(this.consultarClientePorPlan(this.ComboBoxPlanes.getSelectedItem().toString()));
 
             
    }//GEN-LAST:event_buttonClientesPotencialesActionPerformed

    public void llenarTabla(ArrayList clientesPotenciales) {
        String []titulos={"Id","Nombres","Apellidos","Email","Sexo","Edad"};
        modelo= new DefaultTableModel(null,titulos);
        String []Registros=new String[6];
        for(Object myClient : clientesPotenciales){
            Cliente clienteAuxiliar = (Cliente)myClient;
            Registros[0] = clienteAuxiliar.getIdentificacion();
            Registros[1] = clienteAuxiliar.getNombre();
            Registros[2] = clienteAuxiliar.getApellidos();
            Registros[3] = clienteAuxiliar.getEmail();
            Registros[4] = clienteAuxiliar.getGenero();
            Registros[5] = clienteAuxiliar.getEdad();
            modelo.addRow(Registros);
        }
        tbUsuarios.setModel(modelo);

    }

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUIClientesPotenciales.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUIClientesPotenciales.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUIClientesPotenciales.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUIClientesPotenciales.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUIClientesPotenciales().setVisible(true);
            }
        });
    }
    
    private Plan[] consultarPlanesServicio(){
        IServidorCentral servidor = new ServicioServidorCentralSocket();
        String json = servidor.consultarPlanesServicio();
        //System.out.println(json);
        if (!json.equals("NO_ENCONTRADO")) {
            Plan PlanServidor[];
            PlanServidor = deserializarPlanes(json);      
            return PlanServidor;
        }
        return null;
    }
    
   private void actualizarComboBox(){
        IServidorCentral servidor = new ServicioServidorCentralSocket();
        String json = servidor.consultarPlanesServicio();
        //System.out.println(json);
        if (!json.equals("NO_ENCONTRADO")) {
            Plan PlanServidor[];
            PlanServidor = deserializarPlanes(json);
            
            for (Plan myPlan : PlanServidor) {
                myCombo.addElement(myPlan.getNombre());
            }
            this.ComboBoxPlanes.setModel(myCombo);
            
        }
        
    }
    
    
    
    private Cliente[] consultarClientesServicio(){
        IServidorCentral servidor = new ServicioServidorCentralSocket();
        String json = servidor.consultarClientesServicio();
        if (!json.equals("NO_ENCONTRADO")) {
            Cliente clientesServidor[];
            clientesServidor = deserializarClientes(json);          
            return clientesServidor;
        }
        return null;
    }
    
    private ArrayList consultarClientePorPlan(String plan){
        Plan planesTodos[] = consultarPlanesServicio();
        Cliente clientesTodos[] = consultarClientesServicio();
        ArrayList clientesPotenciales = new ArrayList();
        int cantidadClientesPotenciales = 0;
        int edadMinima = 0;
        int edadMaxima = 0;
        
        for(Plan myPlan : planesTodos){
            if(myPlan.getNombre().equals(plan)){
                edadMinima = Integer.parseInt(myPlan.getRangoEdad1());
                edadMaxima = Integer.parseInt(myPlan.getRangoEdad2());
            }
        }
        
        for(Cliente myClient : clientesTodos){
            int auxiliarEdad = Integer.parseInt(myClient.getEdad());
            if(auxiliarEdad >= edadMinima && auxiliarEdad <= edadMaxima){
                clientesPotenciales.add(myClient);
                cantidadClientesPotenciales++;
            }
        }
        
        
        return clientesPotenciales;
    }
            
    
    /**
     * Deserializa los usuarios que fueron consultados en el Servidor Central
     * @param arrayJsonSerializado
     * @return FuncionarioAgencia[] todos los funcionario deserializados
     */
    private Cliente[] deserializarClientes(String arrayJsonSerializado){
        Cliente Clientes[] = new Gson().fromJson(arrayJsonSerializado, Cliente[].class);
        return Clientes;
    }    
    
    
    /**
     * Deserializa los usuarios que fueron consultados en el Servidor Central
     * @param arrayJsonSerializado
     * @return FuncionarioAgencia[] todos los funcionario deserializados
     */
    private Plan[] deserializarPlanes(String arrayJsonSerializado){
        Plan Planes[] = new Gson().fromJson(arrayJsonSerializado, Plan[].class);
        return Planes;
    }
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox ComboBoxPlanes;
    private javax.swing.JButton buttonClientesPotenciales;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tbUsuarios;
    // End of variables declaration//GEN-END:variables

    @Override
    public void actualizar(AModel amodel) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
